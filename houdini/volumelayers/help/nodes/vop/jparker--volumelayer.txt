= Volume Layer Shader =

#icon: path/to/icon

"""Construct a volume layer shader."""

== Overview ==

This operator creates a VolumeLayer base shader that can be used in a VOP network to correctly and efficiently combine different volume mediums.

Houdini's own shading layer compositing nodes do not combine volume shaders in a physically correct way.  For example:
- In the standard volume shader nodes that are included with Houdini, opacity is computed within the VOP before being passed to the output, which when combined with the standard shading layer composite nodes results in incorrect shading. To calculate opacity correctly, density from all input volume shaders must be *added* together before opacity is computed.
- When combining volume shaders, the BSDF contribution of each input must be weighted by the their relative extinction values, which is not possible when opacity is pre-calculated per-shading layer. 

To correct these problems, nodes that work with VolumeLayer structs combine properties prior to computing opacity.  Modifying shader properties by wiring VolumeLayer struct-based nodes directly together maintains the accuracy of the shader network operations.

Think of this node as a specific volumetric medium.  That medium has a density, and can interact with light by scattering it in a certain direction, absorbing it, or emit light via some other energetic process.

TIP:
    - Add a [Volume Layer Compute Lighting|jparker--volumelayercomputelighting] node to the VOP network and wire the VolumeLayer output into it to extract the final F, Ce, Cd and Of output values.
    - Use the [Volume Layer Merge|jparker--volumelayermerge] node to combine separate Volume Layer Shader nodes in a physically correct way.
    - If you need more control, use the [Volume Layer Mix|jparker--volumelayermix] or [Volume Layer Add Quantity|jparker--volumelayeraddquantity] nodes to combine volume layer properties in other ways.

@inputs
density:
    Base material density, float.  Scattering, absorption and emission are scaled by this value.  If nothing is connected, the shader will use the bound "density" field of the volume, otherwise is zero.

F:
    Override the default Henyey-Greenstein phase function BSDF.  One reason to use this input is if you need to combine multiple BSDFs to achieve more complex scattering directions.  For example, a haze that has a very focused forward scattering peak that is mixed with a more general scattering direction.

@parameters

Density Field:
    #id: densityfield

    When density is not connected, default volume field to use as density value.
    
Scattering:
    #id: scatter

    Scattering coefficient.  Probability light is scattered by the material, ranging from zero to infinity, multiplied by density.

Scattering Direction:
    #id: phase

    Anisotropic direction bias.  How strongly light is scattered back towards or away from the light source direction.  Range is (-1, 1).

Label:
    #id: label

    Shading BSDF component label.

Absorption:
    #id: absorb

    Absorption coefficient.  Probability light is absorbed by the material, ranging from zero to infinity, multiplied by density.

Emission:
    #id: emit

    Emission coefficient.  Probability light is re-emitted by the material, ranging from zero to infinity, multiplied by density.

@related

* [Volume Layer Merge|Node:vop/jparker--volumelayermerge]
* [Volume Layer Mix|Node:vop/jparker--volumelayermix]
* [Volume Layer Add Quantity|Node:vop/jparker--volumelayeraddquantity]
* [Volume Layer Compute Lighting|Node:vop/jparker--volumelayercomputelighting]
* [Volume Layer to Shading Layer|Node:vop/jparker--volumelayertoshadinglayer]
* [Volume Layer Pack|Node:vop/jparker--volumelayerpack]
* [Volume Layer Unpack|Node:vop/jparker--volumelayerunpack]
* [Volume Layer Flatten|Node:vop/jparker--volumelayerflatten]
* [Volume Layer Adjust Multiscatter|Node:vop/jparker--volumelayeradjustmultiscatter]
